-- Create enum for user roles
CREATE TYPE user_role AS ENUM ('admin', 'farmer');

-- Create groups table
CREATE TABLE groups (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  creator_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  creator_name VARCHAR(255) NOT NULL,
  creator_role user_role NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create group_members junction table
CREATE TABLE group_members (
  group_id BIGINT REFERENCES groups(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  joined_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  PRIMARY KEY (group_id, user_id)
);

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = TIMEZONE('utc'::text, NOW());
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for updating updated_at
CREATE TRIGGER update_groups_updated_at
  BEFORE UPDATE ON groups
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

-- Create RLS policies
ALTER TABLE groups ENABLE ROW LEVEL SECURITY;
ALTER TABLE group_members ENABLE ROW LEVEL SECURITY;

-- Policy for viewing groups (anyone can view)
CREATE POLICY "Anyone can view groups"
  ON groups FOR SELECT
  USING (true);

-- Policy for counting group members (anyone can count)
CREATE POLICY "Anyone can count group members"
  ON group_members FOR SELECT
  USING (true)
  WITH CHECK (false);

-- Policy for inserting groups (authenticated users only)
CREATE POLICY "Authenticated users can create groups"
  ON groups FOR INSERT
  WITH CHECK (auth.role() = 'authenticated');

-- Policy for updating groups (creator only)
CREATE POLICY "Creators can update their groups"
  ON groups FOR UPDATE
  USING (creator_id = auth.uid());

-- Policy for deleting groups (creator only)
CREATE POLICY "Creators can delete their groups"
  ON groups FOR DELETE
  USING (creator_id = auth.uid());

-- Policies for group members
CREATE POLICY "Members can view group members"
  ON group_members FOR SELECT
  USING (EXISTS (
    SELECT 1 FROM group_members gm
    WHERE gm.group_id = group_members.group_id
    AND gm.user_id = auth.uid()
  ));

CREATE POLICY "Group creators can manage members"
  ON group_members FOR ALL
  USING (EXISTS (
    SELECT 1 FROM groups g
    WHERE g.id = group_members.group_id
    AND g.creator_id = auth.uid()
  ));

-- Create farmers table
CREATE TABLE farmers (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  location VARCHAR(255) NOT NULL,
  crops TEXT[] NOT NULL,
  join_date TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create trigger for updating updated_at
CREATE TRIGGER update_farmers_updated_at
  BEFORE UPDATE ON farmers
  FOR EACH ROW
  EXECUTE PROCEDURE update_updated_at_column();

-- Enable RLS for farmers table
ALTER TABLE farmers ENABLE ROW LEVEL SECURITY;

-- Policy for viewing farmers (anyone can view)
CREATE POLICY "Anyone can view farmers"
  ON farmers FOR SELECT
  USING (true);

-- Policy for inserting farmers (authenticated users only)
CREATE POLICY "Authenticated users can create farmers"
  ON farmers FOR INSERT
  WITH CHECK (auth.role() = 'authenticated');

-- Policy for updating farmers (owner only)
CREATE POLICY "Users can update their own farmer profiles"
  ON farmers FOR UPDATE
  USING (user_id = auth.uid());

-- Policy for deleting farmers (owner only)
CREATE POLICY "Users can delete their own farmer profiles"
  ON farmers FOR DELETE
  USING (user_id = auth.uid()); 